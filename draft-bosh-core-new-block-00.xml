<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-bosh-core-new-block-00" ipr="trust200902">
  <front>
    <title abbrev="New Block-Wise Transfer Options">New Constrained
    Application Protocol (CoAP) Block-Wise Transfer Options</title>

    <author fullname="Mohamed Boucadair" initials="M." surname="Boucadair">
      <organization>Orange</organization>

      <address>
        <postal>
          <street></street>

          <city>Rennes</city>

          <region></region>

          <code>35000</code>

          <country>France</country>
        </postal>

        <email>mohamed.boucadair@orange.com</email>
      </address>
    </author>

    <author fullname="Jon Shallow" initials="J." surname="Shallow">
      <organization></organization>

      <address>
        <postal>
          <street></street>

          <city></city>

          <region></region>

          <code></code>

          <country>United Kingdom</country>
        </postal>

        <email>supjps-ietf@jpshallow.com</email>
      </address>
    </author>

    <date />

    <workgroup>CORE</workgroup>

    <keyword>security</keyword>

    <keyword>mitigation</keyword>

    <keyword>service delivery</keyword>

    <keyword>connectivity</keyword>

    <keyword>anti-DDoS</keyword>

    <keyword>automation</keyword>

    <keyword>cooperation</keyword>

    <keyword>Resilience</keyword>

    <keyword>Filtering</keyword>

    <keyword>Security Center</keyword>

    <keyword>Mitigator</keyword>

    <keyword>Scrubbing</keyword>

    <keyword>dynamic service protection</keyword>

    <keyword>dynamic mitigation</keyword>

    <abstract>
      <t>This document specifies new Constrained Application Protocol (CoAP)
      Block-Wiset transfer options that are meant to accommodate scenarios not
      initially covered by RFC 7959.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t></t>

      <section title="Block-Wise Transfer Options: Overview">
        <t></t>
      </section>

      <section title="Some Complications: The DOTS Example">
        <t>&lt;&lt;&lt;&lt;provide the example DOTS case ++++ Pasting the
        initail text from Jon. We need to elaborte further with the examples
        that you shared on the list&gt;&gt;&gt;</t>

        <t>&lt;&lt;&lt;list&gt;&gt;&gt;</t>

        <t><list style="symbols">
            <t>(1) The use of nonblock2 option with a "relax" of the behavior
            at the server to send the fragments with the same token and
            without waiting for GETs. </t>

            <t>(2) The use of a shim application as you suggested, which
            requires an update on the server side but also on how clients on
            how to fill the gaps (use of PUT/FETCH). </t>

            <t>(3) A DOTS specific approach to build its own chunks and signal
            blocks as part of the CBOR. These blocks are handled as atomic
            notifications. If a block is missing, the client can use GET+Query
            to retrieve the gap. We don't require any modification at the base
            CoAP specs. The issue with this one is to decide what data to put
            in the blocks to avoid that when a block is passed to other
            layers, the overheads won't lead to fragmentation. </t>
          </list></t>

        <t>====</t>

        <t>These status responses are sent back using CoAP NON-Confirmable
        packets - in other words the DOTS client does not have to acknowledge
        receipt of the packet which works in an environment where there is
        heavy packet loss in the same direction as the status packet - the
        DOTS server is not waiting on acknowledgement of the previous status
        packet before sending out the next one (which too may get
        dropped).</t>

        <t>For the status data that is larger than an IP packet, this can
        currently be handled in two ways:<list style="numbers">
            <t>Let IP fragmentation be used by sending large data that is
            fragmented across several IP packets.</t>

            <t>Make use of the CoAP BLOCK2 option (RFC9759) to create CoAP
            fragmentation.</t>
          </list> </t>

        <t>The disadvantage of (1) is that the receiving CoAP library has to
        have a large enough receive data buffer size to handle both the
        encrypted and then plaintext data. The libcoap library has the default
        receive buffer sized for that of an IP packet that is not fragmented.
        This buffer can be made bigger, but how big? What if the DOTS client
        is a constrained device with RAM etc. There is also a challenge of
        managing missing IP fragmented packets which is primarily done by the
        network stack. </t>

        <t>The disadvantage of (2) is that BLOCK2 is a synchronous
        transmission where the DOTS client receives a block of data and then
        has to request the next block of data. With a lossy network, if the
        client does not see a block of data then this status data transmission
        will stall and not recover leaving the DOTS server with outstanding
        data that cannot be transmitted and hence the need for garbage
        collection of failed transmissions. Furthermore with (2), RFC9759
        recommends use of CONfirmable responses to handle potential packet
        loss - which does not work with a flooded pipe DDoS situation. </t>
      </section>

      <section title="New Block-Wise Transfer Options">
        <t>TBC.</t>

        <t>Only the deviation from Block1 and Block2 options will be
        specified.</t>
      </section>
    </section>

    <section anchor="notation" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in BCP 14
      <xref target="RFC2119"></xref><xref target="RFC8174"></xref> when, and
      only when, they appear in all capitals, as shown here.</t>

      <t>Readers should be familiar with the terms and concepts defined in
      <xref target="RFC7252"></xref>.</t>

      <t>The terms "payload" and "body" are defined in <xref
      target="RFC7959"></xref>. The term "payload" is thus used for the actual
      content of a single CoAP message (i.e., a single block being
      transferred), while the term "body" is used for the entire resource
      representation that is being transferred in a block-wise fashion. </t>
    </section>

    <section anchor="spec" title="The Block3 and Block4 Options">
      <t>The properties of Block3 ad Block4 options are shown in Table 1. The
      formatting of this table follows the one used in Table 4 of <xref
      target="RFC7252"></xref> (Section 5.10). The C, U, N, and R columns
      indicate the properties Critical, Unsafe, NoCacheKey, and Repeatable
      defined in Section 5.4 of <xref target="RFC7252"></xref>. Since
      NoCacheKey only has a meaning for options that are Safe-to-Forward, the
      N column is filled with a dash for Block3 ad Block4 options.</t>

      <t><figure align="center">
          <artwork align="center"><![CDATA[+--------+---+---+---+---+-----------+--------+--------+---------+
| Number | C | U | N | R | Name      | Format | Length | Default |
+--------+---+---+---+---+-----------+--------+--------+---------+
|  TBA1  | x | x | - |   | Block3    | uint   |  0-3   |   None  |
|  TBA2  | x | x | - |   | Block4    | uint   |  0-3   |   None  |
+--------+---+---+---+---+-----------+--------+--------+---------+

           Table 1: CoAP Block3 ad Block4 Option Properties]]></artwork>
        </figure></t>

      <t>The Block3 Option pertains to the request payload, and the Block4
      Option pertains to the response payload. The Content-Format Option
      applies to the body, not to the payload.</t>

      <t>Both Block3 and Block4 options are not repeatable. Therefore, any
      request carrying multiple Block3 (or Block4) options MUST be handled
      following the procedure specified in Section 5.4.5 of <xref
      target="RFC7252"></xref>.</t>

      <t>The structure of Block3 ad Block4 options MUST follow the structure
      defined in Secion 2.2 of <xref target="RFC7959"></xref>.</t>

      <t>The Block3 ad Block4 options are not safe to forward. </t>

      <section title="Usage of Block3">
        <t></t>
      </section>

      <section title="Usage of Block4">
        <t></t>
      </section>

      <section title="Combined Usage of Block3 and Block4 Options">
        <t></t>
      </section>
    </section>

    <section title="Examples">
      <t></t>
    </section>

    <section title="Caching Considerations">
      <t>The considerations discussed in Section 2.10 of <xref
      target="RFC7959"></xref> apply for the Block3 ad Block4 options .</t>

      <t>This specification does not require a proxy to obtain the complete
      representation before it serves parts of it to. </t>

      <t>A proxy that supports Block3 ad Block4 options must be prepared to
      receive a GET request indicating one or more missing blocks The server
      can serve from its cache blocks that are available in its cache. If one
      more requested blocks are not available locally, the proxy MUST update
      the GET request to list only missing blocks, and then forward the
      request to the next hop. </t>
    </section>

    <section title="HTTP-Mapping Considerations">
      <t>This section focuses on the HTTP mappings specific to the CoAP
      extension specified in this document. As a reminder, the basic normative
      requirements on HTTP/CoAP mappings are defined in Section 10 of <xref
      target="RFC7252"></xref>. The implementation guidelines for HTTP/CoAP
      mappings are elaborated in <xref target="RFC8075"></xref>.</t>

      <t>The rules defined in Section 5 of <xref target="RFC7959"></xref> are
      to be followed. </t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t><list style="empty">
          <t>Editorial Note: Please update TBA1/TBA2 statements within the
          document with the assigned codes.</t>
        </list></t>

      <section anchor="option" title="CoAP Option Numbers">
        <t>IANA is requested to add the following entry to the "CoAP Option
        Numbers" sub-registry available at
        https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#option-numbers:</t>

        <t><figure align="center">
            <artwork align="center"><![CDATA[+--------+------------------+-----------+
| Number | Name             | Reference |
+--------+------------------+-----------+
|  TBA1  | Block3           | [RFCXXXX] |
|  TBA2  | Block4           | [RFCXXXX] |
+--------+------------------+-----------+

Table 3: CoAP Block3 ad Block4 Option Numbers]]></artwork>
          </figure></t>

        <t>This document suggests XX and XX as a values to be assigned for the
        new option numbers.</t>
      </section>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>Security considerations discussed in Section 9 of <xref
      target="RFC7959"></xref> should be taken into account. </t>
    </section>

    <section anchor="ack" title="Acknowledgements">
      <t>Thanks to Achim Kraus, Christian Ams&uuml;ss, Carsten Bormann, Jim
      Schaad for the comments on the mailing list.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include="reference.RFC.7252"?>

      <?rfc include='reference.RFC.8174'?>

      <?rfc include='reference.RFC.7230'?>

      <?rfc include='reference.RFC.8075'?>

      <?rfc include='reference.RFC.7959'?>

      <?rfc include='reference.RFC.7641'?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.I-D.ietf-dots-telemetry"?>

      <?rfc include='reference.RFC.8586'?>
    </references>
  </back>
</rfc>
