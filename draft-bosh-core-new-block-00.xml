<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-bosh-core-new-block-00" ipr="trust200902">
  <front>
    <title abbrev="New Block-Wise Transfer Options">New Constrained
    Application Protocol (CoAP) Block-Wise Transfer Options</title>

    <author fullname="Mohamed Boucadair" initials="M." surname="Boucadair">
      <organization>Orange</organization>

      <address>
        <postal>
          <street></street>

          <city>Rennes</city>

          <region></region>

          <code>35000</code>

          <country>France</country>
        </postal>

        <email>mohamed.boucadair@orange.com</email>
      </address>
    </author>

    <author fullname="Jon Shallow" initials="J." surname="Shallow">
      <organization></organization>

      <address>
        <postal>
          <street></street>

          <city></city>

          <region></region>

          <code></code>

          <country>United Kingdom</country>
        </postal>

        <email>supjps-ietf@jpshallow.com</email>
      </address>
    </author>

    <date />

    <workgroup>CORE</workgroup>

    <keyword>security</keyword>

    <keyword>mitigation</keyword>

    <keyword>service delivery</keyword>

    <keyword>connectivity</keyword>

    <keyword>anti-DDoS</keyword>

    <keyword>automation</keyword>

    <keyword>cooperation</keyword>

    <keyword>Resilience</keyword>

    <keyword>Filtering</keyword>

    <keyword>Security Center</keyword>

    <keyword>Mitigator</keyword>

    <keyword>Scrubbing</keyword>

    <keyword>dynamic service protection</keyword>

    <keyword>dynamic mitigation</keyword>

    <abstract>
      <t>This document specifies new Constrained Application Protocol (CoAP)
      Block-Wise transfer options: Block3 and Block4 options. These options
      are similar to the CoAP Block1 and Block2 options, but enable faster
      transmissions of big blocks of data with less packet interchanges as
      well as supporting faster recovery should any of the Blocks get lost in
      transmission.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <section title="Existing Block-Wise Transfer Options">
        <t>The Constrained Application Protocol (CoAP) <xref
        target="RFC7252"></xref>, although inspired by HTTP, was designed to
        use UDP instead of TCP. The message layer of CoAP over UDP includes
        support for reliable delivery, simple congestion control, and flow
        control. <xref target="RFC7959"></xref> introduced the CoAP Block1 and
        Block2 options to handle data records that cannot fit in a single IP
        packet, so not having to rely on IP fragmentation.</t>

        <t>The CoAP Block1 and Block2 options work well in environments where
        there are no or minimal packet losses. They operate synchronously
        where each block has to be requested and can only ask for (or send)
        the next block when the request for the previous Block has completed.
        Packet, and hence Block transmission rate, is controlled by Round Trip
        Times.</t>

        <t>There is a requirement for these Blocks of data to be transmitted
        under network conditions where there may be transient packet loss such
        as when a network is subject to a Distributed Denial Of Service (DDoS)
        attack and there is a need for DDoS mitigation agents need to
        communicate with each other (e.g., <xref
        target="I-D.ietf-dots-telemetry"></xref>). As a reminder, <xref
        target="RFC7959"></xref> recommends use of Confirmable responses to
        handle potential packet loss; which does not work with a flooded pipe
        DDoS situation. </t>
      </section>

      <section title="New Block-Wise Transfer Options">
        <t>This document introduces the CoAP Block3 and Block4 options. These
        options are similar in operation to the CoAP Block1 and Block2 options
        respectively, but enable faster transmissions of big blocks of data
        with less packet interchanges as well as supporting faster recovery
        should any of the Blocks get lost in transmission.</t>

        <t>The faster transmissions occur as all the Blocks can be transmitted
        serially (as are IP fragmented packets) without having to wait for an
        acknowledgement from the remote CoAP peer. Recovery of missing Blocks
        is faster in that multiple missing Blocks can be requested in a single
        packet.</t>

        <t>Non-Confirmable request usage of Block3 and Non-Confirmable
        response usage of Block4 enable the faster transmissions of the blocks
        of the body message as there is no need to wait for the responses.
        Note that the same performance benefits can be applied to Confirmable
        messages if the value of NSTART is increased from 1 (Section 4.7 of
        <xref target="RFC7252"></xref>). Some sample examples with Confirmable
        messages are provided in <xref target="CON"></xref>.</t>

        <t>A CoAP endpoint can acknowledge all or a subset of the blocks.
        Concretely, the receiving CoAP endpoint informs the CoAP endpoint
        sender about all blocks that have been received. The CoAP endpoint
        sender will then retransmit only the blocks that have been lost in
        transmission.</t>

        <t>Only the deviation from Block1 and Block2 options are specified.
        Pointers to appropriate <xref target="RFC7959"></xref> sections are
        provided. </t>
      </section>
    </section>

    <section anchor="notation" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in BCP 14
      <xref target="RFC2119"></xref><xref target="RFC8174"></xref> when, and
      only when, they appear in all capitals, as shown here.</t>

      <t>Readers should be familiar with the terms and concepts defined in
      <xref target="RFC7252"></xref>.</t>

      <t>The terms "payload" and "body" are defined in <xref
      target="RFC7959"></xref>. The term "payload" is thus used for the
      content of a single CoAP message (i.e., a single block being
      transferred), while the term "body" is used for the entire resource
      representation that is being transferred in a block-wise fashion. </t>
    </section>

    <section anchor="spec" title="The Block3 and Block4 Options">
      <section title="Properties of Block3 ad Block4 Options">
        <t>The properties of Block3 and Block4 options are shown in Table 1.
        The formatting of this table follows the one used in Table 4 of <xref
        target="RFC7252"></xref> (Section 5.10). The C, U, N, and R columns
        indicate the properties Critical, Unsafe, NoCacheKey, and Repeatable
        defined in Section 5.4 of <xref target="RFC7252"></xref>. Only C and R
        columns are marked for Block3 and Block4 options.</t>

        <t><figure align="center">
            <artwork align="center"><![CDATA[    +--------+---+---+---+---+-----------+--------+--------+---------+
    | Number | C | U | N | R | Name      | Format | Length | Default |
    +========+===+===+===+===+===========+========+========+=========+
    |  TBA1  | x |   |   | x | Block3    | uint   |  0-7   | (none)  |
    |  TBA2  | x |   |   | x | Block4    | uint   |  0-7   | (none)  |
    +--------+---+---+---+---+-----------+--------+--------+---------+

           Table 1: CoAP Block3 and Block4 Option Properties
]]></artwork>
          </figure></t>

        <t>The Block3 option pertains to the request payload, and the Block4
        option pertains to the response payload. The Content-Format option
        applies to the body, not to the payload.</t>

        <t>For the methods defined in <xref target="RFC7252"></xref> and <xref
        target="RFC8132"></xref>, Block3 is useful with the payload-bearing
        POST, PUT, and PATCH requests and their responses. Block4 is useful
        with GET, POST, PUT, and FETCH requests and their payload-bearing
        responses (2.01, 2.02, 2.04, and 2.05) (Section 5.5 of <xref
        target="RFC7252"></xref>).</t>

        <t>To indicate support for Block4 responses, the CoAP client MUST
        include the Block4 option in a GET or FETCH request so that the server
        knows that the client supports this functionality. Otherwise, the
        server would use the Block2 option (if supported) to send back a
        message body that is larger than can fit into a single IP packet <xref
        target="RFC7959"></xref>.</t>

        <t>Where Block3 option is present in a request or Block4 option in a
        response (i.e., in that message to the payload of which it pertains),
        it indicates a block-wise transfer and describes how this specific
        block-wise payload forms part of the entire body being transferred
        (referred to as "descriptive usage"). Where it is present in the
        opposite direction, it provides additional control on how that payload
        will be formed or was processed (referred to as "control usage").</t>

        <t>Implementation of either block option is intended to be optional.
        However, when it is present in a CoAP message, it MUST be processed
        (or the message rejected); therefore, it is identified as a Critical
        option.</t>

        <t>The Block3 and Block4 options are safe to forward. That is, a CoAP
        proxy that does not understand the Block3 and Block4 options should
        forward the options on. </t>

        <t>Both Block3 and Block4 options are repeatable when requesting
        re-transmissions of missing Blocks but not otherwise. Otherwise, any
        request carrying multiple Block3 (or Block4) options MUST be handled
        following the procedure specified in Section 5.4.5 of <xref
        target="RFC7252"></xref>.</t>
      </section>

      <section title="Structure of Block3 and Block4 Options">
        <t>The structure of Block3 and Block4 options follows the structure
        defined in Section 2.2 of <xref target="RFC7959"></xref> with two
        additional fields:<list style="symbols">
            <t>The Block ID (BID) which associates all the Blocks that make up
            the large item of data that is being transferred.</t>

            <t> The "All" bit (called, A-bit) used when acknowledging all the
            blocks.</t>
          </list></t>

        <t>As such, five items of information may need to be transferred in a
        Block3 or Block4 option: <list style="symbols">
            <t>the size of the block (size exponent (SZX)),</t>

            <t>whether more blocks are following (More (M)),</t>

            <t>the relative number of the block (Block Number (NUM)) within a
            sequence of blocks with the given size,</t>

            <t>whether this is acknowledging all the blocks successfully
            received (A), and </t>

            <t>the Block identifier number (BID) that is common to the
            sequence of blocks with the same given size. The BID is different
            for each set of sequence of blocks.</t>
          </list></t>

        <t>The value of the Block3 or Block4 option is a variable-size (0 to 7
        byte) unsigned integer (uint) (Section 3.2 of <xref
        target="RFC7252"></xref>). This integer value encodes the
        aforementioned five fields as shown in <xref
        target="structure"></xref>. Note that, due to the CoAP uint-encoding
        rules, when all of NUM, M, SZX, A, and BID happen to be zero, a
        zero-byte integer will be sent. </t>

        <t><figure align="center" anchor="structure"
            title="Structure of Block3 and Block4 Options">
            <artwork align="center"><![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      BID    |A|                   NUM                 |M| SZX |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|               BID           |A|                   NUM              
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 NUM    |M| SZX |
+-+-+-+-+-+-+-+-+

 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                   BID                       |A|      NUM       
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            NUM         |M| SZX |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             BID                             |A|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                   NUM                 |M| SZX |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

]]></artwork>
          </figure></t>

        <t>The twenty-fourth least significant bit is the A-bit (&ldquo;val
        &amp; 0x1000000&rdquo;).</t>

        <t>The option value shifted right by 25 (&ldquo;(val &gt;&gt;
        25)&rdquo;)(the BID field) is the Block identifier that identifies
        which sequence of blocks this particular block is in.</t>

        <t>The current transfer is about the "size" bytes starting at byte
        "NUM &lt;&lt; (SZX + 4)". </t>

        <t>Within the option value of a Block3 or Block4 option, the meaning
        of the option fields is defined below. Note that the block size (SZX,
        size exponent), the M-bit, and the NUM fields are defined in Section
        2.2 of <xref target="RFC7959"></xref>, but are provided below for the
        reader's convenience:<list style="hanging">
            <t hangText="A: ">All Flag. This bit is only set in a response
            packet to indicate that this response refers to all of the blocks
            in the body. The A-bit MUST be unset in all other cases.</t>

            <t hangText="BID: ">Block Identifier. This block identifier is the
            same for all of the blocks in the body of data that is being
            transferred. It is used when a particular block needs to be
            re-transmitted. <vspace blankLines="1" />This value MUST be
            different for distinct sets of blocks of data and SHOULD be
            incremented whenever a new body of data is being transmitted for a
            CoAP session between peers. Alternate algorithms to generate the
            BID are discussed in <xref target="RFC7739"></xref>.</t>

            <t hangText="NUM: ">Block Number, indicating the block number
            being requested or provided. Block number '0' indicates the first
            block of a body (i.e., starting with the first byte of the body).
            </t>

            <t hangText="M: ">More Flag ("not last block"). For descriptive
            usage, this flag, if unset, indicates that the payload in this
            message is the last block in the body; when set, it indicates that
            there are one or more additional blocks available. <vspace
            blankLines="1" />When a Block4 option is used in a request to
            retrieve a specific block number ("control usage"), the M-bit MUST
            be sent as zero and ignored on reception. In a Block3 option in a
            response, the M-bit is used to indicate atomicity, similar to
            Block1 option (<xref target="RFC7959"></xref>). </t>

            <t hangText="SZX: ">Block Size. The block size is represented as a
            three-bit unsigned integer indicating the size of a block to the
            power of two. Thus, block size = 2**(SZX + 4). The allowed values
            of SZX are 0 to 6, i.e., the minimum block size is 2**(0+4) = 16
            and the maximum is 2**(6+4) = 1024. The value 7 for SZX (which
            would indicate a block size of 2048) is used as a BERT option in
            <xref target="RFC8323"></xref>. </t>
          </list></t>

        <t>There is no default value for the Block3 and Block4 options.
        Absence of one of these options is equivalent to an option value of 0
        with respect to the value of NUM, M, A, and BID that could be given in
        the option, i.e., it indicates that the current block is the first and
        only block of the transfer (block number is set to 0, M-bit is unset,
        A-bit is unset, and BID is set to 0). However, in contrast to the
        explicit value 0, which would indicate an SZX of 0, and thus a size
        value of 16 bytes, there is no specific explicit size implied by the
        absence of the option -- the size is left unspecified. (As for any
        uint, the explicit value 0 is efficiently indicated by a zero-length
        option; this, therefore, is different in semantics from the absence of
        the option).</t>
      </section>

      <section title="Working with Observe">
        <t>As the blocks of the body are sent without waiting for
        acknowledgement of the individual blocks, the Observe value <xref
        target="RFC7641"></xref> MUST be the same for all the blocks of the
        same body. </t>

        <t>Likewise, the Tokens MUST all have the same value for all the
        blocks of the same body. This is so that if any of the blocks gets
        lost during transmission (including the first one), the receiving CoAP
        endpoint can take the appropriate decisions
        (implementation-specific).</t>
      </section>

      <section title="Working with Size1 and Size2 Options">
        <t><xref target="RFC7959"></xref> defines two CoAP options, Size1 for
        indicating the size of the representation transferred in requests, and
        Size2 for indicating the size of the representation transferred in
        responses.</t>

        <t>It is RECOMMENDED that the Size1 option is used with the Block3
        option and that the Size2 option is used with the Block4 option.</t>
      </section>

      <section title="Working with Etag Option">
        <t>The Etag option defined in Section 5.10.6 of <xref
        target="RFC7252"></xref> applies to the whole representation of the
        resource, and thus to the body of the response. </t>
      </section>
    </section>

    <section title="Caching Considerations">
      <t>The Block3 and Block4 options are part of the cache key. As such, a
      CoAP proxy that does not understand the Block3 and Block4 options must
      follow the recommendations in Section 5.7.1 of <xref
      target="RFC7252"></xref> for caching. </t>

      <t>This specification does not require a proxy to obtain the complete
      representation before it serves parts of it to. Otherwise, the
      considerations discussed in Section 2.10 of <xref
      target="RFC7959"></xref> apply for the Block3 and Block4 options (with
      Block3 substituted for Block1 and Block4 substituted for Block2) for
      proxies that support Block3 and Block4 options.</t>

      <t>A proxy that supports Block3 and Block4 options MUST be prepared to
      receive a GET message indicating one or more missing blocks. The proxy
      can serve from its cache missing blocks that are available in its cache.
      If one more requested blocks are not available locally, the proxy MUST
      update the GET request with the blocks that it served locally, and then
      forward the request to the next hop. </t>
    </section>

    <section title="HTTP-Mapping Considerations">
      <t>As a reminder, the basic normative requirements on HTTP/CoAP mappings
      are defined in Section 10 of <xref target="RFC7252"></xref>. The
      implementation guidelines for HTTP/CoAP mappings are elaborated in <xref
      target="RFC8075"></xref>.</t>

      <t>The rules defined in Section 5 of <xref target="RFC7959"></xref> are
      to be followed. </t>
    </section>

    <section title="Examples of Selective Block Recovery">
      <t>This section provides some sample flows to illustrate the use of
      Block3 and Block4 options. The following conventions are used in the
      following sub-sections:</t>

      <t><figure>
          <artwork><![CDATA[   T: Token value
   O: Observe Option value
   M: Message ID
  B3: Block3 option values BID/All/NUM/More/SZX
  B4: Block3 option values BID/All/NUM/More/SZX
   \: Trimming long lines
[[]]: Comments
---X: Message loss
]]></artwork>
        </figure></t>

      <section title="Block3 Option: Non-Confirmable Example">
        <t><xref target="B3non"></xref> depicts an example of a NON PUT
        request conveying Block3 option. All the blocks are received by the
        server; hence the A-bit is set in the 2.05 message sent by the server
        to the client.</t>

        <t><figure anchor="B3non"
            title="Example of NON Request with Block3 Option (Without Loss)">
            <artwork><![CDATA[        CoAP        CoAP
       Client      Server
         |          |
         +--------->| NON PUT /path M:0x01 T:0xf0 B3:10/0/0/1/1024
         +--------->| NON PUT /path M:0x02 T:0xf0 B3:10/0/1/1/1024
         +--------->| NON PUT /path M:0x03 T:0xf0 B3:10/0/2/1/1024
         +--------->| NON PUT /path M:0x04 T:0xf0 B3:10/0/3/0/1024
         |<---------+ NON 2.05 M:0xf1 T:0xf0 B3:10/1/0/0/1024
             ...
]]></artwork>
          </figure></t>

        <t>Consider now a scenario where a new body of data is to be sent by
        the client, but some blocks are dropped in transmission as illustrated
        in <xref target="B3non1"></xref>.</t>

        <t><figure anchor="B3non1"
            title="Example of NON Request with Block3 Option (With Loss)">
            <artwork><![CDATA[        CoAP        CoAP
       Client      Server
         |          |
         +--------->| NON PUT /path M:0x05 T:0xf0 B3:11/0/0/1/1024
         +----X     | NON PUT /path M:0x06 T:0xf0 B3:11/0/1/1/1024
         +----X     | NON PUT /path M:0x07 T:0xf0 B3:11/0/2/1/1024
         +--------->| NON PUT /path M:0x08 T:0xf0 B3:11/0/3/1/1024
         |          |
             ...
]]></artwork>
          </figure></t>

        <t>The server realizes that some blocks are missing and asks for the
        missing ones in one go (<xref target="B3non2"></xref>). It does so by
        indicating which blocks have been received.</t>

        <t><figure anchor="B3non2"
            title="Example of NON Request with Block3 Option (Blocks Recovery)">
            <artwork><![CDATA[        CoAP        CoAP
       Client      Server
         |          |
             ...
         |<---------+ NON 2.05 M:0xf2 T:0xf0 B3:11/0/0/0/1024\
         |          |                        B3:11/0/3/0/1024
         +--------->| NON PUT /path M:0x09 T:0xf1 B3:11/0/1/1/1024
         +----X     | NON PUT /path M:0x0a T:0xf1 B3:11/0/2/1/1024
         |          |
      [[This can be split across several packets if too large]]
         |<---------+ NON 2.05 M:0xf3 T:0xf1 B3:11/0/0/0/1024\ 
         |          |                        B3:11/0/1/1/1024\
         |          |                        B3:11/0/3/0/1024
         +--------->| NON PUT /path M:0x0b T:0xf2 B3:10/0/3/0/1024
         |<---------+ NON 2.05 M:0xf4 T:0xf2 B3:10/1/0/0/1024
         |          |
             ...
]]></artwork>
          </figure></t>

        <t>Under high levels of traffic loss, the client can elect not to
        retry sending missing blocks of data. This decision is
        implementation-specific.</t>
      </section>

      <section title="Block4 Option: Non-Confirmable Example">
        <t><xref target="nonb4"></xref> illustrates the example of Block4
        option. The client sends a NON GET carrying an Observe and a Block4
        opiotns. The Block4 option indciates a size hint (1024 bytes). This
        request is replied by the serer using four (4) blocks that are
        transmitetted to the client without any loss. Each of these blocks
        carries a Block4 option. The same process is repeated when an Observe
        is triggered, but no loss is experienced by any of of the notification
        bloks.</t>

        <t><figure anchor="nonb4"
            title="Example of NON Notifications with Block4 Option (Without Loss)">
            <artwork><![CDATA[        CoAP        CoAP
       Client      Server
         |          |
         +--------->| NON GET /path M:0x01 T:0xf0 O:0 B4:0/0/0/0/1024
         |<---------+ NON 2.05 M:0xf1 T:0xf0 O:1234 B4:21/0/0/1/1024
         |<---------+ NON 2.05 M:0xf2 T:0xf0 O:1234 B4:21/0/1/1/1024
         |<---------+ NON 2.05 M:0xf3 T:0xf0 O:1234 B4:21/0/2/1/1024
         |<---------+ NON 2.05 M:0xf4 T:0xf0 O:1234 B4:21/0/3/0/1024
             ...
            [[Observe triggered]]
         |<---------+ NON 2.05 M:0xf5 T:0xf0 O:1235 B4:22/0/0/1/1024
         |<---------+ NON 2.05 M:0xf6 T:0xf0 O:1235 B4:22/0/1/1/1024
         |<---------+ NON 2.05 M:0xf7 T:0xf0 O:1235 B4:22/0/2/1/1024
         |<---------+ NON 2.05 M:0xf8 T:0xf0 O:1235 B4:22/0/3/0/1024
             ...

]]></artwork>
          </figure></t>

        <t><xref target="nonb41"></xref> shows the example of an Observe that
        is triggered but for which some notification blocks are lost. The
        client detects the missing blocks and request their retransmission. It
        does so by indicating the blocks that were successfully received.</t>

        <t><figure anchor="nonb41"
            title="Example of NON Notifications with Block4 Option (Blocks Recovery)">
            <artwork><![CDATA[        CoAP        CoAP
       Client      Server
         |          |
             ...
            [[Observe triggered]]
         |<---------+ NON 2.05 M:0xf9 T:0xf0 O:1236 B4:23/0/0/1/1024
         |   X<-----+ NON 2.05 M:0xfa T:0xf0 O:1236 B4:23/0/1/1/1024
         |   X<-----+ NON 2.05 M:0xfb T:0xf0 O:1236 B4:23/0/2/1/1024
         |<---------+ NON 2.05 M:0xfc T:0xf0 O:1236 B4:23/0/3/0/1024
         |          |
      [[Client realises blocks are missing and asks for the missing
         ones in one go]]
         +--------->| NON GET /path M:0x02 T:0xf1 B4:23/0/1/0/1024\
         |          |                             B4:23/0/2/0/1024
         |   X<-----+ NON 2.05 M:0xfd T:0xf1 B4:23/0/1/1/1024
         |<---------+ NON 2.05 M:0xfe T:0xf1 B4:23/0/2/1/1024
         |          |
     [[Get final missing block]]
         +--------->| NON GET /path M:0x03 T:0xf2 B4:23/0/1/0/1024
         |<---------+ NON 2.05 M:0xff T:0xf2 B4:23/0/1/1/1024
             ...
]]></artwork>
          </figure></t>

        <t>Under high levels of traffic loss, the client can elect not to
        retry getting missing blocks of data. This decision is
        implementation-specific.</t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>IANA is requested to add the following entries to the "CoAP Option
      Numbers" sub-registry available at
      https://www.iana.org/assignments/core-parameters/core-parameters.xhtml#option-numbers:</t>

      <t><figure align="center">
          <artwork align="center"><![CDATA[+--------+------------------+-----------+
| Number | Name             | Reference |
+========+==================+===========+
|  TBA1  | Block3           | [RFCXXXX] |
|  TBA2  | Block4           | [RFCXXXX] |
+--------+------------------+-----------+

Table 2: CoAP Block3 and Block4 Option Numbers]]></artwork>
        </figure></t>

      <t>This document suggests XX and XX as a values to be assigned for the
      new option numbers.</t>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>Security considerations discussed in Section 9 of <xref
      target="RFC7959"></xref> should be taken into account. </t>

      <t>[[discuss iof any security issues related to the incremental BID
      values. Lifetime of a BID (pointer to RFC8200)]]</t>
    </section>

    <section anchor="ack" title="Acknowledgements">
      <t>Thanks to Achim Kraus, Christian Ams&uuml;ss, Carsten Bormann, Jim
      Schaad for the comments on the mailing list.</t>

      <t>Some text from <xref target="RFC7959"></xref> is reused for readers
      convenience.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include="reference.RFC.7252"?>

      <?rfc include='reference.RFC.8174'?>

      <?rfc include='reference.RFC.8075'?>

      <?rfc include='reference.RFC.7959'?>

      <?rfc include='reference.RFC.7641'?>

      <?rfc include='reference.RFC.8132'?>

      <?rfc include='reference.RFC.8323'?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.I-D.ietf-dots-telemetry"?>

      <?rfc include='reference.RFC.7739'?>
    </references>

    <section anchor="CON" title="Examples with Confirmable Messages">
      <t>This example assumes NSTART has been increased to at least 4.</t>

      <section title="Block3 Option">
        <t>Let's now consider the use Block3 option with a CON request as
        shown in <xref target="con3"></xref>. All the blocks are acknowledged
        (ACK).</t>

        <t><figure anchor="con3"
            title="Example of CON Request with Block3 Option (Without Loss)">
            <artwork><![CDATA[        CoAP        CoAP
       Client      Server
         |          |
         +--------->| CON PUT /path M:0x01 T:0xf0 B3:10/0/0/1/1024
         +--------->| CON PUT /path M:0x02 T:0xf0 B3:10/0/1/1/1024
         +--------->| CON PUT /path M:0x03 T:0xf0 B3:10/0/2/1/1024
         +--------->| CON PUT /path M:0x04 T:0xf0 B3:10/0/3/0/1024
         |<---------+ ACK 0.00 M:0x01
         |<---------+ ACK 0.00 M:0x02
         |<---------+ ACK 0.00 M:0x03
         |<---------+ ACK 0.00 M:0x04

]]></artwork>
          </figure></t>

        <t>Now, suppose that a new body of data is to sent but with some
        blocks dropped in transmission as illustrated in <xref
        target="con32"></xref>. The client will retry sedning blocks for which
        no ACK was received.</t>

        <t><figure anchor="con32"
            title="Example of CON Request with Block3 Option (Blocks Recovery)">
            <artwork><![CDATA[        CoAP        CoAP
       Client      Server
         |          |
         +--------->| NON PUT /path M:0x05 T:0xf0 B3:11/0/0/1/1024
         +----X     | NON PUT /path M:0x06 T:0xf0 B3:11/0/1/1/1024
         +----X     | NON PUT /path M:0x07 T:0xf0 B3:11/0/2/1/1024
         +--------->| NON PUT /path M:0x08 T:0xf0 B3:11/0/3/1/1024
         |<---------+ ACK 0.00 M:0x05
         |<---------+ ACK 0.00 M:0x08
         |          |
     [[The client retries sending packets not acknowledged]]
         +--------->| NON PUT /path M:0x09 T:0xf0 B3:11/0/1/1/1024
         +----X     | NON PUT /path M:0x0a T:0xf0 B3:11/0/2/1/1024
         |<---------+ ACK 0.00 M:0x09
         |          |
     [[The client retransmits messages not acknowledged
      (exponential backoff)]]
         +----?     | NON PUT /path M:0x0a T:0xf0 B3:11/0/2/1/1024
         |          |
       [[Either transmission failure (acknowledge retry timeout)
         or successfully transmitted.]]
]]></artwork>
          </figure>It is implementation dependent as to whether a CoAP session
        is terminated following acknowledge retry timeout, or whether the CoAP
        session continues to be used under such adverse traffic
        conditions.</t>

        <t>If there is likely to be the possibility of network transient
        losses, then the use of Non-Confirmable traffic should be
        considered.</t>
      </section>

      <section title="Block4 Option">
        <t>An exmaple of the use of Block4 option with Confirmable messages is
        shown in <xref target="b4con"></xref>. </t>

        <t><figure align="center" anchor="b4con"
            title="Example of CON Notifications with Block4 Option">
            <artwork align="center"><![CDATA[       Client      Server
         |          |
         +--------->| CON GET /path M:0x01 T:0xf0 O:0 B4:0/0/0/0/1024
         |<---------+ ACK 2.05 M:0x01 T:0xf0 O:1234 B4:21/0/0/1/1024
         |<---------+ ACK 2.05 M:0xe1 T:0xf0 O:1234 B4:21/0/1/1/1024
         |<---------+ ACK 2.05 M:0xe2 T:0xf0 O:1234 B4:21/0/2/1/1024
         |<---------+ ACK 2.05 M:0xe3 T:0xf0 O:1235 B4:21/0/3/0/1024
             ...
      [[Observe triggered]]
         |<---------+ CON 2.05 M:0xe4 T:0xf0 O:1235 B4:22/0/0/1/1024
         |<---------+ CON 2.05 M:0xe5 T:0xf0 O:1235 B4:22/0/1/1/1024
         |<---------+ CON 2.05 M:0xe6 T:0xf0 O:1235 B4:22/0/2/1/1024
         |<---------+ CON 2.05 M:0xe7 T:0xf0 O:1235 B4:22/0/3/0/1024
         |--------->+ ACK 0.00 M:0xe4
         |--------->+ ACK 0.00 M:0xe5
         |--------->+ ACK 0.00 M:0xe6
         |--------->+ ACK 0.00 M:0xe7
             ...
            [[Observe triggered]]
         |<---------+ CON 2.05 M:0xe8 T:0xf0 O:1236 B4:23/0/0/1/1024
         |   X<-----+ CON 2.05 M:0xe9 T:0xf0 O:1236 B4:23/0/1/1/1024
         |   X<-----+ CON 2.05 M:0xea T:0xf0 O:1236 B4:23/0/2/1/1024
         |<---------+ CON 2.05 M:0xeb T:0xf0 O:1236 B4:23/0/3/0/1024
         |--------->+ ACK 0.00 M:0xe8
         |--------->+ ACK 0.00 M:0xeb
         |          |
     [[Server retransmits messages not acknowledged]]
         |?--------+ CON 2.05 M:0xec T:0xf0 O:1236 B4:23/0/1/1/1024
         |   X<-----+ CON 2.05 M:0xed T:0xf0 O:1236 B4:23/0/2/1/1024
         |--------->+ ACK 0.00 M:0xec
         |          |
     [[Server retransmits messages not acknowledged
       (exponential backoff)]]
         |?--------+ CON 2.05 M:0xee T:0xf0 O:1236 B4:23/0/1/1/1024
         |   X<-----+ CON 2.05 M:0xee T:0xf0 O:1236 B4:23/0/2/1/1024
         |          |
       [[Either transmission failure (acknowledge retry timeout)
         or successfully transmitted.]]
]]></artwork>
          </figure></t>

        <t>It is implementation-dependent as to whether a CoAP session is
        terminated following acknowledge retry timeout, or whether the CoAP
        session continues to be used under such adverse traffic
        conditions.</t>

        <t>If there is likely to be the possibility of network transient
        losses, then the use of Non-Confirmable traffic should be
        considered.</t>
      </section>
    </section>
  </back>
</rfc>
